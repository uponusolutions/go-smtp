# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

permissions:
  contents: read

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.x'

    - name: generate test coverage
      run: go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...

    - name: check test coverage
      uses: vladopajic/go-test-coverage@v2
      with:
        config: ./.testcoverage.yml

    - name: find pull request ID
      run: |
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ github.ref_name }}&state=open")
            PR_ID=$(echo "$PR_DATA" | jq -r '.[0].number')
            
            if [ "$PR_ID" != "null" ]; then
            echo "pull_request_id=$PR_ID" >> $GITHUB_ENV
            else
            echo "No open pull request found for this branch."
            fi
    - name: post coverage report
      if: env.pull_request_id
      uses: thollander/actions-comment-pull-request@v3
      with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      comment-tag: coverage-report
      pr-number: ${{ env.pull_request_id }}
      message: |
            go-test-coverage report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }}```
    - name: finally check coverage
      if: steps.coverage.outcome == 'failure'
      shell: bash
      run: echo "coverage check failed" && exit 1
